package Log;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class Log {
	public static class LogMapper extends Mapper<LongWritable, Text, Text, IntWritable> {
        private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yyyy HH:mm");

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            String[] parts = line.split("\t");

		if (parts.length >= 8) {
                String user = parts[1];
                String loginTimeStr = parts[5];
                String logoutTimeStr = parts[7];
 try {
                    Date loginTime = DATE_FORMAT.parse(loginTimeStr);
                    Date logoutTime = DATE_FORMAT.parse(logoutTimeStr);

                    long sessionDuration = logoutTime.getTime() - loginTime.getTime();
                    int sessionDurationMinutes = (int) (sessionDuration / (1000 * 60)); // Convert milliseconds to minutes

                    context.write(new Text(user), new IntWritable(sessionDurationMinutes));
                }
catch (ParseException e) {
                    e.printStackTrace();
                }
}}}

 public static class MaxDurationReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private IntWritable maxDuration = new IntWritable();
        private List<String> usersWithMaxDuration = new ArrayList<>();
        private int globalMax = Integer.MIN_VALUE;
public void reduce(Text key, Iterable<IntWritable> values, Context context)
                throws IOException, InterruptedException {
            int max = Integer.MIN_VALUE;
            for (IntWritable value : values) {
                int duration = value.get();
                if (duration > max) {
                    max = duration;
                }
            }
 if (max > globalMax) {
                globalMax = max;
                usersWithMaxDuration.clear();
                usersWithMaxDuration.add(key.toString());
            } else if (max == globalMax) {
                usersWithMaxDuration.add(key.toString());
            }
            maxDuration.set(max);
        }
protected void cleanup(Context context) throws IOException, InterruptedException {
            for (String user : usersWithMaxDuration) {
                context.write(new Text(user), new IntWritable(globalMax));
            }
        }
    }
public static void main(String[] args) throws Exception {
    	Configuration c = new Configuration();
        String[] files = new GenericOptionsParser(c,args).getRemainingArgs();
        Path input = new Path(files[0]);
        Path output = new Path(files[1]);
        Job j = new Job(c,"logfile");
j.setJarByClass(Log.class);
        j.setMapperClass(LogMapper.class);
        j.setReducerClass(MaxDurationReducer.class);
        j.setOutputValueClass(IntWritable.class);
        j.setOutputKeyClass(Text.class);
FileOutputFormat.setOutputPath(j,output);
        FileInputFormat.addInputPath(j,input);
        System.exit(j.waitForCompletion(true)?0:1);
    }
}


