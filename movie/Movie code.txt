package Movie11;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;


public class Movie11 {
	
	 public static void main(String[] args) throws Exception {
	        Configuration conf = new Configuration();
	        String[] Files = new GenericOptionsParser(conf, args).getRemainingArgs();
	        Path input = new Path(Files[0]);
	        Path output = new Path(Files[1]);
	        Job job = Job.getInstance(conf, "Movie");
	        job.setJarByClass(Movie11.class);
	        job.setMapperClass(MapperMovie.class);
	        job.setReducerClass(ReducerMovie.class);
	        job.setOutputKeyClass(Text.class);
	        job.setOutputValueClass(DoubleWritable.class);
	        FileInputFormat.addInputPath(job, input);
	        FileOutputFormat.setOutputPath(job, output);
	        System.exit(job.waitForCompletion(true) ? 0 : 1);}
	 
	 public static class MapperMovie extends Mapper<LongWritable, Text, Text, DoubleWritable> {
	        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	            String line = value.toString();
	            String[] data = line.split("\t");
	            if (data.length >= 4) {
	                String movie_id = data[1];
	                double rating = Double.parseDouble(data[2]);
	                context.write(new Text(movie_id), new DoubleWritable(rating));}}}
	  public static class ReducerMovie extends Reducer<Text, DoubleWritable, Text, DoubleWritable> {
	        private double maxRating = Double.MIN_VALUE;
	        private List<String> maxMovies = new ArrayList<>();
	        public void reduce(Text key, Iterable<DoubleWritable> values, Context context)
	                throws IOException, InterruptedException {
	            double localMaxRating = Double.MIN_VALUE;
	            for (DoubleWritable value : values) {
	                double rating = value.get();
	                if (rating > localMaxRating) {
	                    localMaxRating = rating;
	                }
	            }
	            if (localMaxRating > maxRating) {
	                maxMovies.clear();
	                maxMovies.add(key.toString());
	                maxRating = localMaxRating;
	            } else if (localMaxRating == maxRating) {
	                maxMovies.add(key.toString());
	            }
	        }
	        protected void cleanup(Context context) throws IOException, InterruptedException {
	            for (String movie : maxMovies) {
	                context.write(new Text(movie), new DoubleWritable(maxRating));
	            }
	        }
	    }

}
